{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ALL_USERS","ADMIN_PATTERN","RegExp","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","picker","register","value","leaveChat","pubnub","unsubscribe","channels","channel","onMessage","data","console","log","message","state","enabled","userId","action","setState","newState","objectSpread","background","color","window","location","href","url","onPresenceChange","presenceData","addUser","uuid","removeUser","error","onStatusChange","jump","jumpToUrl","publish","handle1","hex","handle2","user","users","includes","push","_","filter","x","toggleEnabled","name","event","target","checked","handleTextChange","parts","split","urlQuery","isAdmin","match","replace","Math","round","random","PubNubReact","publishKey","subscribeKey","init","assertThisInitialized","self","addEventListener","subscribe","withPresence","getMessage","getPresence","getStatus","hereNow","status","response","occupants","forEach","_this2","concat","toConsumableArray","usersList","map","react_default","a","createElement","index_es","key","style","width","marginTop","variant","component","lib","ref","triangle","onChange","onChangeComplete","onClick","id","paddingTop","label","className","flex","qrcode_react_lib_default","height","margin","renderAdmin","Component","Boolean","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d8b42cc8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport _ from 'lodash';\n\nimport PubNubReact from 'pubnub-react';\nimport { GithubPicker } from 'react-color';\nimport { Button, Card, Switch, TextField, Typography, CardActions } from '@material-ui/core';\nimport QRCode from 'qrcode.react';\n\nconst ALL_USERS = \"__ALL__\";\nconst ADMIN_PATTERN = new RegExp(\";;\");\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    const parts = window.location.href.split(\"?\");\n\n    this.urlQuery = ((parts && parts[1]) || 'default');\n    this.isAdmin = this.urlQuery.match(ADMIN_PATTERN);\n    this.url = window.location.href;\n\n    if (this.isAdmin) {\n      this.urlQuery = this.urlQuery.replace(ADMIN_PATTERN, \"\");\n      this.url = this.url.replace(ADMIN_PATTERN, \"\");\n    }\n\n    this.channel = '__v2__' + this.urlQuery;\n    this.userId = \"User\" + Math.round(Math.random() * 1000);\n    this.jumpToUrl = \"https://pubnub.com\";\n\n    this.state = {\n      enabled: true,\n      background: '#aaa',\n      jumpToUrl: 'https://pubnub.com',\n      users: []\n    };\n\n    this.pubnub = new PubNubReact({\n      publishKey: 'pub-c-3774941a-49a4-4b06-85c6-a08b45f3d1cf',\n      subscribeKey: 'sub-c-bf8fb378-edb1-11e8-aba4-3a82e8287a69',\n      uuid: this.userId\n    });\n\n    this.pubnub.init(this);\n  }\n\n  picker = null;\n\n  register = value => {\n    this.picker = value;\n  }\n\n  componentWillMount() {\n    const self = this;\n\n    window.addEventListener('beforeunload', self.leaveChat);\n\n    this.pubnub.subscribe({\n      channels: [self.channel],\n      withPresence: true\n    });\n\n    this.pubnub.getMessage(this.channel, self.onMessage);\n    this.pubnub.getPresence(this.channel, self.onPresenceChange);\n    this.pubnub.getStatus(self.onStatusChange);\n\n    this.pubnub.hereNow({ channels: [this.channel] },\n      function (status, response) {\n        _(response.channels[self.channel].occupants).forEach((x) => self.addUser(x));\n      });\n  }\n\n  componentWillUnmount() {\n    this.leaveChat();\n  }\n\n  leaveChat = () => {\n    this.pubnub.unsubscribe({ channels: [this.channel] });\n  }\n\n  onMessage = (data) => {\n    console.log(data.message);\n\n    if (!this.state.enabled) {\n      return;\n    }\n\n    if ((data.message.userId !== ALL_USERS) && (data.message.userId !== this.userId)) {\n      return;\n    }\n\n    if (data.message.action === \"colorChange\") {\n      this.setState(() => {\n        var newState = { ...this.state };\n        newState.background = data.message.color;\n\n        return newState;\n      });\n    }\n\n    if (data.message.action === \"jumpToUrl\") {\n      window.location.href = data.message.url;\n    }\n  }\n\n  onPresenceChange = (presenceData) => {\n    switch (presenceData.action) {\n      case 'join':\n        this.addUser(presenceData.uuid);\n        break;\n      case 'leave':\n      case 'timeout':\n        this.removeUser(presenceData.uuid);\n        break;\n      default:\n        console.error('unknown action: ' + presenceData.action);\n    }\n  }\n\n  onStatusChange = (data) => {\n    console.log('status changed', data);\n  }\n\n  jump = userId => () => {\n    const message = {\n      action: 'jumpToUrl',\n      userId: userId,\n      url: this.state.jumpToUrl\n    };\n\n    this.pubnub.publish({\n      message: message,\n      channel: this.channel\n    });\n  }\n\n  handle1 = userId => color => {\n    const message = {\n      action: 'colorChange',\n      userId: userId,\n      color: color.hex\n    };\n\n    this.pubnub.publish({\n      message: message,\n      channel: this.channel\n    });\n  }\n\n  handle2 = userId => color => {\n    if (!this.state.enabled) {\n      return;\n    }\n\n    if ((userId !== ALL_USERS) && (userId !== this.userId)) {\n      return;\n    }\n\n    var newState = { ...this.state };\n    newState.background = color.hex;\n\n    this.setState(() => {\n      return newState;\n    });\n  };\n\n  addUser = user => {\n    if (!user) {\n      return;\n    }\n\n    if (user.uuid) {\n      user = user.uuid;\n    }\n\n    var newState = { ...this.state };\n\n    if (!this.state.users.includes(user)) {\n      newState.users.push(user);\n    }\n\n    this.setState(() => {\n      return newState;\n    });\n  }\n\n  removeUser = user => () => {\n    var newState = { ...this.state };\n    newState.users = _(newState.users).filter((x) => x !== user);\n\n    this.setState(() => {\n      return newState;\n    });\n  }\n\n  toggleEnabled = name => event => {\n    var newState = { ...this.state };\n    newState.enabled = event.target.checked;\n\n    this.setState(() => {\n      return newState;\n    });\n  }\n\n  handleTextChange = event => {\n    var newState = { ...this.state };\n    newState.jumpToUrl = event.target.value;\n\n    this.setState(() => {\n      return newState;\n    });\n  }\n\n  renderAdmin() {\n    if (!this.isAdmin) {\n      return;\n    }\n\n    var users = [ALL_USERS, ...this.state.users];\n\n    var usersList = _.map(users, user => {\n      return <Card key={user} style={{ width: \"340px\", marginTop: \"20px\" }}>\n        <Typography variant=\"h6\" component=\"h6\">{user}</Typography>\n\n        <CardActions>\n\n          <GithubPicker\n            enabled={this.state.enabled}\n            ref={(_) => { this.picker = _; }}\n            triangle={'hide'}\n            color={this.state.background}\n            onChange={this.handle1(user)}\n            onChangeComplete={this.handle2(user)}\n          />\n\n          <Button onClick={this.jump(user)}>Jump!</Button>\n        </CardActions>\n      </Card>;\n    });\n\n    return <div id=\"Admin\">\n      {usersList}\n      <div style={{ paddingTop: \"20px\" }}></div>\n      <TextField label=\"Jump to URL\" value={this.state.jumpToUrl} onChange={this.handleTextChange} />\n    </div>;\n  }\n\n  render() {\n    return (\n      <div id=\"App\" className=\"App\" flex={1}>\n        <header className=\"App-header\" style={{ background: this.state.background }}>\n          <QRCode value={this.url} style={{ width: \"300px\", height: \"300px\" }} />\n          <div style={{margin:\"10px\"}}>{this.userId}</div>\n          <Switch checked={this.state.enabled} onChange={this.toggleEnabled('enabled')} color=\"primary\" />\n          {this.renderAdmin()}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}